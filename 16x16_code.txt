#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <chrono>
#include <mutex>

const int SIZE = 16;
const int SQRT_SIZE = 4;
std::mutex mtx;

struct SudokuSolver {
    std::vector<std::vector<int>> board;
    std::vector<std::vector<bool>> rowUsed, colUsed, boxUsed;

    SudokuSolver() : board(SIZE, std::vector<int>(SIZE)),
                     rowUsed(SIZE, std::vector<bool>(SIZE + 1)),
                     colUsed(SIZE, std::vector<bool>(SIZE + 1)),
                     boxUsed(SIZE, std::vector<bool>(SIZE + 1)) {}

    bool isSafe(int row, int col, int num) const {
        return !rowUsed[row][num] && !colUsed[col][num] && !boxUsed[row / SQRT_SIZE * SQRT_SIZE + col / SQRT_SIZE][num];
    }

    bool heuristicSolve() {
        int row, col;
        if (!findBestUnassignedLocation(row, col))
            return true; // Puzzle solved

        for (int num = 1; num <= SIZE; num++) {
            if (isSafe(row, col, num)) {
                placeNum(row, col, num);
                if (heuristicSolve())
                    return true;
                removeNum(row, col, num);
            }
        }
        return false;
    }

    bool findBestUnassignedLocation(int &row, int &col) {
        int minOptions = SIZE + 1;
        bool found = false;
        for (int r = 0; r < SIZE; r++) {
            for (int c = 0; c < SIZE; c++) {
                if (board[r][c] == 0) {
                    int options = countOptions(r, c);
                    if (options < minOptions) {
                        minOptions = options;
                        row = r;
                        col = c;
                        found = true;
                    }
                }
            }
        }
        return found;
    }

    int countOptions(int row, int col) const {
        int count = 0;
        for (int num = 1; num <= SIZE; num++) {
            if (isSafe(row, col, num)) count++;
        }
        return count;
    }

    void placeNum(int row, int col, int num) {
        board[row][col] = num;
        rowUsed[row][num] = true;
        colUsed[col][num] = true;
        boxUsed[row / SQRT_SIZE * SQRT_SIZE + col / SQRT_SIZE][num] = true;
    }

    void removeNum(int row, int col, int num) {
        board[row][col] = 0;
        rowUsed[row][num] = false;
        colUsed[col][num] = false;
        boxUsed[row / SQRT_SIZE * SQRT_SIZE + col / SQRT_SIZE][num] = false;
    }

    void printBoard(std::ostream& os = std::cout) const {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                os << board[i][j] << " ";
            }
            os << std::endl;
        }
    }

    bool loadBoard(const std::string& filename) {
        std::ifstream file(filename);
        if (!file.is_open()) {
            return false;
        }

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                file >> board[i][j];
                if (board[i][j]) {
                    placeNum(i, j, board[i][j]);
                }
            }
        }

        file.close();
        return true;
    }

    bool saveBoard(const std::string& filename) {
        std::ofstream file(filename);
        if (!file.is_open()) {
            return false;
        }

        printBoard(file);
        file.close();
        return true;
    }
};

int main() {
    SudokuSolver solver;
    std::cout << "Enter the input file name:";
    std::string filename;
    std::cin >> filename;
    if (!solver.loadBoard("D:\\\\Git Hub Projects\\\\Sudoku Solver\\\\1\\\\" + filename)) {
        std::cerr << "Failed to load board from file." << std::endl;
        return 1;
    }

    auto start = std::chrono::high_resolution_clock::now();

    bool result = solver.heuristicSolve();

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapsed = end - start;

    if (result) {
        std::cout << "Sudoku solved in " << elapsed.count() << " milliseconds." << std::endl;
        solver.printBoard();
    } else {
        std::cout << "No solution exists." << std::endl;
    }

    return 0;
}
